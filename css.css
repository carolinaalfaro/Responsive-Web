body {
	width: 100%;
	height: 100%;
	margin: 0;
	display: block;
	background-color: #c8c8df;
	cursor: url ()
}

.row1 {
	height: 10%;
	width: 100%;
	display: flex;
}
.row2 {
	height: 35%;
	width: 90%;
	display: flex;
	padding: 15px 15px 15px 15px;
}

.row3 {
	height: 5%;
	width: 100%;
}

.row4 {
	height: 43%;
	width: 95%;
	display: flex;
	padding: 15px 15px 15px 15px;
}

.row1-box1 {
	height: 100%;
	width:25%;
}
.title1-box1 {
	height: 100%;
	width:50%;
}
/* Below are the colors and and their hex codes we used throughout the process
of creating the responsive web page*/
.blue {background-color: #89c3d3;}
.purple {background-color: #c8c8df;}
.purple-two{background-color: #6666a7;}
.yellow {background-color: #FAE317;}
.green {background-color: #87baba;}
.white {background-color: #ffffff;}

.row2-about {
	height: 100%;
	width:60%;
}
.row2-image {
	height: 100%;
	width:40%;
}

.column4-box1 {
	height: 100%;
	width: 20%;
}
	
.column4-box2 {
	height: 100%;
	width: 30%;
}
.column4-box3 {
	height: 100%;
	width: 20%;
	display: flex;
}
.column4-mini {
	height: 100%;
	width: 50%;
}
.minibox {
	height: 25%;
	width: 100%;
}


/* https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/ */
/* If you're using 'display: flex' this class can be used to easily center horizontally! */
.center-horizontal {
	align-items: center;
	display: flex;
}

/* If you're using 'display: flex' this class can be used to easily center vertically! */
.center-vertical {
	justify-content: center;
	display: flex;
}

/* Keep my image from overflowing it's parent DIV */
.contain-image {
	max-height: 100%;
	max-width: 100%;
}
/* This is a second code that also keeps my image from overflowing it's parent DIV */
.contain-image-two {
	max-height: 100%;
	max-width: 100%;
}
h1 {
    font-family: 'Lobster';
	font-size: 60px;
}
h2 {
    font-family: 'Lobster';
	font-size: 40px;
	color: #ffffff;
}
h3 {
    font-family: 'Lobster';
	font-size: 30px;
}
h4 {
    font-family: 'Lobster';
	font-size: 20px;
}
p2 {
	font-family: 'PT Serif';
	font-size: 20px;
	color: #a7cccc;
}
p3 {
	font-family: 'PT Serif';
	font-size: 25px;
}

/* This media query consists of the body making the class row2 block its contents that its has contain being the 
"row2-about and row2-image" be stacked upon each other. In addition, all of the divs within the "row4" are stacking
on top of each other when the screen is at 700px. Within the code there is also the display order, and none property 
being used. The display none property in this case is used in the "row3" in order to remove it or make it disappear
when there is a breakpoint. Furthermore, the display order property can also you to switch the order when a breakpoint hits. */
@media screen and (max-width: 700px) {
	body {
		width: 100%;
		height: 100%;
		margin: 0;
		display: block;
	}
	h1 {
    font-family: 'Lobster';
	font-size: 40px;
	}
	h2 {
    font-family: 'Lobster';
	font-size: 30px;
	}
	h3 {
    font-family: 'Lobster';
	font-size: 25px;
	}
	p3  {
		font-family: 'PT Serif';
		font-size: 17px;
	}
	p2  {
		font-family: 'PT Serif';
		font-size:18px;
	}
	.row2 {
		height: 45%;
		width: 100%;
		display: block;
	}
	.row2-about {
		height: 60%;
		width:95%;
		overflow: auto;
}
	.row2-image {
		height: 45%;
		width:90%;
		content: url("images/cafe.PNG");
		align-items: center;
		display: flex;
	}
	.row3 {
		height: 5%;
		width: 100%;
		display: none;
	}
	.row4 {
		display: block;
		width: 100%;
		height: 55%;
	}

	.contain-image-two {
		display: none;
	}
	.column4-box1{
		display: none;
	}
	.column4-box2 {
		order: 1;
		height: 40%;
		width: 100%;
		overflow: auto;
	}
	.column4-box3 {
		order: 2;
		width: 100%;
	}
}